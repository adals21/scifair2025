import numpy as np
from scipy.optimize import curve_fit
def poly2d(xy, a, b, c, d, e):
    x, y = xy
    return a * x**2 + b * y**2 + c * x + d * y + e
x_data = np.array([-13363042.4938928,-13363035.2483407,-13363119.7797819,-13362842.0336181,-13363192.2353028,-13362994.1902122,-13363139.1012541,-13362846.8639862,-13362890.3372987,-13363088.3823894])
y_data = np.array([4091667.44771179,4091505.6303816,4091343.81305141,4091534.61258999,4091498.3848295,4091394.53191609,4091609.483295,4091382.45599593,4091648.12623953,4091438.00522868])
z_data = np.array([45.00000,38.00000,33.00000,34.00000,32.00000,35.00000,34.00000,29.00000,41.00000,39.00000])
#example data
xy_data = np.vstack((x_data, y_data))
popt, _ = curve_fit(poly2d, xy_data, z_data)
a, b, c, d, e = popt
print(f"{a}, {b}, {c}, {d}, {e}")
#uses least-squares fitting algorithm from SciPy library to fit 2nd-degree polynomial without an xy term to the altitude z as a function of x and y, from 10 points
